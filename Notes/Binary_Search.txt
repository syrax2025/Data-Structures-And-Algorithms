Binary Search Is an algorithm which divides the search space into two parts after every comparision.

If the condition is unsatisfied then the half in which the target cannot lie is eleminated and the search continues until it is sucessful.If the search ends with an empty  half, the condition cannot be fulfilled and target is not found.

Basic Binary Search

1. Find the middle element.
2. If target is greater than middle element then search in right half of array.
3. If target is less than middle element then search in left half of array.
4. if target equals middle element then return it's position.


Order Agnostic Binary Search(Descending Order Array) will be vice versa of it.

Time Complexity 
Best Case : O(1)
Wors Case : O(log N)


*** Use this formula while finding the middle element : 
    mid = start + (end - start)/2 ((start + mid)/2)
    This will make sure that our mid value don't overflow the integer value.

3 Parts of a sucessful Binary Search

1. Pre-processing - Sort if collection is unsorted.
2. Binary Search - Using loop or recursion to divide the search space in half after each comparison.
3. Post-processing - Determine the viable candiates in the remaining space.


There are three templates of Binary Search 

1. Most Basic And Strandard Binary Search

int binarySearch(int[] nums, int target){
  if(nums == null || nums.length == 0)
    return -1;

  int left = 0, right = nums.length - 1;
  while(left <= right){
    // Prevent (left + right) overflow
    int mid = left + (right - left) / 2;
    if(nums[mid] == target){ return mid; }
    else if(nums[mid] < target) { left = mid + 1; }
    else { right = mid - 1; }
  }

  // End Condition: left > right
  return -1;
}


Problems On This Template 

1. Sqrt(x)
2. Guess The Number Higher Or Lower
3. Search In Rotated Sorted Array 


2. Binary Search Template II

- Use the element's right neighbor to determine if the condition is met and decide whether to go left or right.
- Guarantees Search Space is at least 2 in size at each step.
- Loop/Recursion ends when you have 1 element left. Need to access if remaining element meets the condtion or not.


int binarySearch(int[] nums, int target){
  if(nums == null || nums.length == 0)
    return -1;

  int left = 0, right = nums.length - 1;
  while(left < right){
    // Prevent (left + right) overflow
    int mid = left + (right - left) / 2;
    if(nums[mid] == target){ return mid; }
    else if(nums[mid] < target) { left = mid + 1; }
    else { right = mid; }
  }

  // Post-processing:
  // End Condition: left == right
  if(nums[left] == target) return left;
  return -1;
}

Distinguishing Syntax:

Initial Condition: left = 0, right = length - 1
Termination: left == right
Searching Left: right = mid
Searching Right: left = mid+1


3. Binary Search Template III

 int binarySearch(int[] nums, int target){
  if(nums == null || nums.length == 0)
    return -1;

  int left = 0, right = nums.length - 1;
  while(left + 1 < right){
    // Prevent (left + right) overflow
    int mid = left + (right - left) / 2;
    if(nums[mid] == target){ return mid; }
    else if(nums[mid] < target) { left = mid + 1; }
    else { right = mid; }
  }

  // Post-processing:
  // End Condition: left == right
  if(nums[left] == target) return left;
  if(nums[right] == target) return right;
  return -1;
}


Initial Condition: left = 0, right = length - 1
Termination: left+1 == right
Searching Left: right = mid
Searching Right: left = mid

Search Space will be 3 elements.

After the termination there will be two elements remains.

And we have to check these elements and if answer exsists and return it.
